{
  "stats": {
    "suites": 2,
    "tests": 10,
    "passes": 8,
    "pending": 0,
    "failures": 2,
    "start": "2025-07-20T21:43:31.976Z",
    "end": "2025-07-20T21:43:34.437Z",
    "duration": 2461,
    "testsRegistered": 10,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "97ee13ea-e327-44d1-96f4-7fc5bf418287",
      "title": "",
      "fullFile": "",
      "file": "",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "4bb31412-407e-4ee8-a6df-f51c5bcc961c",
          "title": "Author API Tests",
          "fullFile": "C:\\Ivona\\FaleRestAPis\\tests\\authorsAPI.js",
          "file": "\\tests\\authorsAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get all authors",
              "fullTitle": "Author API Tests should get all authors",
              "timedOut": false,
              "duration": 359,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const getAuthorsRes = await request(baseUrl)\n    .get('/api/v1/Authors')\n    .expect(res => {\n        res.body.forEach(author => {\n            expect(author).to.have.property('id');\n            expect(author).to.have.property('idBook');\n            expect(author).to.have.property('fistName');\n            expect(author).to.have.property('lastName');\n        });\n    })\n    .expect(200);\nexpect(getAuthorsRes.status).to.equal(200);\nexpect(getAuthorsRes.body).to.be.an('array');\nexpect(getAuthorsRes.body.length).to.be.greaterThan(0);",
              "err": {
                "message": "AssertionError: expected { id: 1, idBook: 1, …(2) } to have property 'fistName'",
                "estack": "AssertionError: expected { id: 1, idBook: 1, …(2) } to have property 'fistName'\n    at Context.<anonymous> (file:///C:/Ivona/FaleRestAPis/tests/authorsAPI.js:11:14)\n    at process.processImmediate (node:internal/timers:476:21)\n----\n    at file:///C:/Ivona/FaleRestAPis/tests/authorsAPI.js:15:44\n    at Array.forEach (<anonymous>)\n    at file:///C:/Ivona/FaleRestAPis/tests/authorsAPI.js:12:26\n    at C:\\Ivona\\FaleRestAPis\\node_modules\\supertest\\lib\\test.js:365:13\n    at Test._assertFunction (node_modules\\supertest\\lib\\test.js:342:13)\n    at Test.assert (node_modules\\supertest\\lib\\test.js:195:23)\n    at localAssert (node_modules\\supertest\\lib\\test.js:138:14)\n    at C:\\Ivona\\FaleRestAPis\\node_modules\\supertest\\lib\\test.js:156:7\n    at Request.callback (node_modules\\superagent\\lib\\node\\index.js:847:12)\n    at C:\\Ivona\\FaleRestAPis\\node_modules\\superagent\\lib\\node\\index.js:1102:18\n    at IncomingMessage.<anonymous> (node_modules\\superagent\\lib\\node\\parsers\\json.js:21:7)\n    at IncomingMessage.emit (node:events:525:35)\n    at endReadableNT (node:internal/streams/readable:1359:12)\n    at process.processTicksAndRejections (node:internal/process/task_queues:82:21)",
                "diff": null
              },
              "uuid": "d9fa1e71-4331-4cb0-9e8f-b3fb80142aad",
              "parentUUID": "4bb31412-407e-4ee8-a6df-f51c5bcc961c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new author",
              "fullTitle": "Author API Tests should create a new author",
              "timedOut": false,
              "duration": 184,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postAuthorRes = await request(baseUrl)\n    .post('/api/v1/Authors')\n    .send({\n        id: 700,\n        idBook: 177,\n        firstName: 'Bono',\n        lastName: 'TheDog'\n    })\n    .expect(200);\nexpect(postAuthorRes.body).to.deep.include({\n    id: 700,\n    idBook: 177,\n    firstName: 'Bono',\n    lastName: 'TheDog'\n});",
              "err": {},
              "uuid": "3bf610c1-7e22-49e7-b643-ad1fdc6caad4",
              "parentUUID": "4bb31412-407e-4ee8-a6df-f51c5bcc961c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get author by ID",
              "fullTitle": "Author API Tests should get author by ID",
              "timedOut": false,
              "duration": 178,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getAuthorByIdRes = await request(baseUrl)\n    .get('/api/v1/Authors/70')\n    .expect(200);\nexpect(getAuthorByIdRes.body.id).to.equal(70);\nexpect(getAuthorByIdRes.body.idBook).to.be.a('number');\nexpect(getAuthorByIdRes.body.firstName).to.equal('First Name 70');\nexpect(getAuthorByIdRes.body.lastName).to.equal('Last Name 70');",
              "err": {},
              "uuid": "1d8c543a-4024-457d-91e4-086cf3cef429",
              "parentUUID": "4bb31412-407e-4ee8-a6df-f51c5bcc961c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update author by ID",
              "fullTitle": "Author API Tests should update author by ID",
              "timedOut": false,
              "duration": 187,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const putAuthorRes = await request(baseUrl)\n    .put('/api/v1/Authors/70')\n    .send({\n        id: 700,\n        idBook: 177,\n        firstName: 'Abc',\n        lastName: 'Def'\n    })\n    .expect(200);\nassert.equal(putAuthorRes.status, 200);\nassert.equal(putAuthorRes.body.id, 700);\nassert.equal(putAuthorRes.body.idBook, 177);\nassert.equal(putAuthorRes.body.firstName, 'Abc');\nassert.equal(putAuthorRes.body.lastName, 'Def');",
              "err": {},
              "uuid": "48e67d2e-8f15-4397-959c-3c6ed17276f4",
              "parentUUID": "4bb31412-407e-4ee8-a6df-f51c5bcc961c",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete author by ID",
              "fullTitle": "Author API Tests should delete author by ID",
              "timedOut": false,
              "duration": 181,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteAuthorRes = await request(baseUrl)\n    .delete('/api/v1/Authors/70')\n    .expect(200);\nassert.equal(deleteAuthorRes.status, 200);",
              "err": {},
              "uuid": "2d3fde1d-2945-4200-9f1a-64e56ab28095",
              "parentUUID": "4bb31412-407e-4ee8-a6df-f51c5bcc961c",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "3bf610c1-7e22-49e7-b643-ad1fdc6caad4",
            "1d8c543a-4024-457d-91e4-086cf3cef429",
            "48e67d2e-8f15-4397-959c-3c6ed17276f4",
            "2d3fde1d-2945-4200-9f1a-64e56ab28095"
          ],
          "failures": [
            "d9fa1e71-4331-4cb0-9e8f-b3fb80142aad"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1089,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        },
        {
          "uuid": "39a2f2e4-41e4-48a7-95a5-48dc17949475",
          "title": "Book API Tests",
          "fullFile": "C:\\Ivona\\FaleRestAPis\\tests\\bookAPI.js",
          "file": "\\tests\\bookAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get all books",
              "fullTitle": "Book API Tests should get all books",
              "timedOut": false,
              "duration": 482,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getBooksRes = await request(baseUrl)\n    .get('/api/v1/Books')\n    .expect(200);\nexpect(getBooksRes.status).to.equal(200);\nexpect(getBooksRes.body).to.be.an('array');\nexpect(getBooksRes.body.length).to.be.greaterThan(0);",
              "err": {},
              "uuid": "41ce6c5e-8fbd-4c66-aaf6-8e308f576b28",
              "parentUUID": "39a2f2e4-41e4-48a7-95a5-48dc17949475",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new book",
              "fullTitle": "Book API Tests should create a new book",
              "timedOut": false,
              "duration": 196,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postBookRes = await request(baseUrl)\n    .post('/api/v1/Books')\n    .send({\n        id: 70,\n        title: 'Book1',\n        description: 'description',\n        pageCount: 10,\n        excerpt: 'string',\n        publishDate: '2025-07-20T19:00:06.57Z'\n    })\n    .expect(200);\nexpect(postBookRes.body).to.deep.include({\n    id: 70,\n    title: 'Book1',\n    description: 'description',\n    pageCount: 10,\n    excerpt: 'string',\n    publishDate: '2025-07-20T19:00:06.57Z'\n});",
              "err": {},
              "uuid": "5b3bd902-5cc7-4184-bf24-20650b9d93b1",
              "parentUUID": "39a2f2e4-41e4-48a7-95a5-48dc17949475",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get book by ID",
              "fullTitle": "Book API Tests should get book by ID",
              "timedOut": false,
              "duration": 277,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getBookByIdRes = await request(baseUrl)\n    .get('/api/v1/Books/70')\n    .expect(200);\nexpect(getBookByIdRes.body.id).to.equal(70);\nexpect(getBookByIdRes.body.title).to.equal('Book 70');\nexpect(getBookByIdRes.body.pageCount).to.equal(7000);\nexpect(getBookByIdRes.body.publishDate).to.contain('2025-05-11');",
              "err": {},
              "uuid": "affc84ab-2773-4af4-a549-91201f45fac4",
              "parentUUID": "39a2f2e4-41e4-48a7-95a5-48dc17949475",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update book by ID",
              "fullTitle": "Book API Tests should update book by ID",
              "timedOut": false,
              "duration": 210,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const putBookRes = await request(baseUrl)\n    .put('/api/v1/Books/70')\n    .send({\n        id: 70,\n        title: 'Updated Book',\n        description: 'Updated description',\n        pageCount: 20,\n        excerpt: 'Updated excerpt',\n        publishDate: '2025-07-20T19:00:06.50Z'\n    })\n    .expect(200);\nassert.equal(putBookRes.status, 200);\nassert.equal(putBookRes.body.id, 70);\nassert.equal(putBookRes.body.title, 'Updated Book');\nassert.equal(putBookRes.body.description, 'Updated description');\nassert.equal(putBookRes.body.pageCount, 20);\nassert.equal(putBookRes.body.excerpt, 'Updated excerpt');\nassert.equal(putBookRes.body.publishDate, '2025-07-20T19:00:06.57Z');",
              "err": {
                "message": "AssertionError: '2025-07-20T19:00:06.5Z' == '2025-07-20T19:00:06.57Z'",
                "estack": "AssertionError [ERR_ASSERTION]: '2025-07-20T19:00:06.5Z' == '2025-07-20T19:00:06.57Z'\n    at Context.<anonymous> (file:///C:/Ivona/FaleRestAPis/tests/bookAPI.js:67:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 2025-07-20T19:00:06.5Z\n+ 2025-07-20T19:00:06.57Z\n"
              },
              "uuid": "aa3b6c09-1584-4f31-be03-b05ceace647b",
              "parentUUID": "39a2f2e4-41e4-48a7-95a5-48dc17949475",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete book by ID",
              "fullTitle": "Book API Tests should delete book by ID",
              "timedOut": false,
              "duration": 190,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const deleteBookRes = await request(baseUrl)\n    .delete('/api/v1/Books/70')\n    .expect(200);\nassert.equal(deleteBookRes.status, 200);",
              "err": {},
              "uuid": "941bc83a-c957-495f-993f-306527b897cb",
              "parentUUID": "39a2f2e4-41e4-48a7-95a5-48dc17949475",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "41ce6c5e-8fbd-4c66-aaf6-8e308f576b28",
            "5b3bd902-5cc7-4184-bf24-20650b9d93b1",
            "affc84ab-2773-4af4-a549-91201f45fac4",
            "941bc83a-c957-495f-993f-306527b897cb"
          ],
          "failures": [
            "aa3b6c09-1584-4f31-be03-b05ceace647b"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1355,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}