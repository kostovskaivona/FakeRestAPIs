{
  "stats": {
    "suites": 1,
    "tests": 5,
    "passes": 4,
    "pending": 0,
    "failures": 1,
    "start": "2025-07-20T21:33:05.727Z",
    "end": "2025-07-20T21:33:06.892Z",
    "duration": 1165,
    "testsRegistered": 5,
    "passPercent": 80,
    "pendingPercent": 0,
    "other": 0,
    "hasOther": false,
    "skipped": 0,
    "hasSkipped": false
  },
  "results": [
    {
      "uuid": "d38b0ec6-2591-4344-9858-daf3c4f54ca2",
      "title": "",
      "fullFile": "C:\\Ivona\\FaleRestAPis\\authorsAPI.js",
      "file": "\\authorsAPI.js",
      "beforeHooks": [],
      "afterHooks": [],
      "tests": [],
      "suites": [
        {
          "uuid": "340a631a-cf17-4e08-a470-343f041d470f",
          "title": "Author API Tests",
          "fullFile": "C:\\Ivona\\FaleRestAPis\\authorsAPI.js",
          "file": "\\authorsAPI.js",
          "beforeHooks": [],
          "afterHooks": [],
          "tests": [
            {
              "title": "should get all authors",
              "fullTitle": "Author API Tests should get all authors",
              "timedOut": false,
              "duration": 383,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getAuthorsRes = await request(baseUrl)\n    .get('/api/v1/Authors')\n    .expect(res => {\n        res.body.forEach(author => {\n            expect(author).to.have.property('id');\n            expect(author).to.have.property('idBook');\n            expect(author).to.have.property('firstName');\n            expect(author).to.have.property('lastName');\n        });\n    })\n    .expect(200);\nexpect(getAuthorsRes.status).to.equal(200);\nexpect(getAuthorsRes.body).to.be.an('array');\nexpect(getAuthorsRes.body.length).to.be.greaterThan(0);",
              "err": {},
              "uuid": "87253ec1-f18c-4c3c-a595-44e794d3e172",
              "parentUUID": "340a631a-cf17-4e08-a470-343f041d470f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should create a new author",
              "fullTitle": "Author API Tests should create a new author",
              "timedOut": false,
              "duration": 189,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const postAuthorRes = await request(baseUrl)\n    .post('/api/v1/Authors')\n    .send({\n        id: 700,\n        idBook: 177,\n        firstName: 'Bono',\n        lastName: 'TheDog'\n    })\n    .expect(200);\nexpect(postAuthorRes.body).to.deep.include({\n    id: 700,\n    idBook: 177,\n    firstName: 'Bono',\n    lastName: 'TheDog'\n});",
              "err": {},
              "uuid": "bf8d6b1a-9595-4c5b-b994-a016022814e7",
              "parentUUID": "340a631a-cf17-4e08-a470-343f041d470f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should get author by ID",
              "fullTitle": "Author API Tests should get author by ID",
              "timedOut": false,
              "duration": 200,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const getAuthorByIdRes = await request(baseUrl)\n    .get('/api/v1/Authors/70')\n    .expect(200);\nexpect(getAuthorByIdRes.body.id).to.equal(70);\nexpect(getAuthorByIdRes.body.idBook).to.be.a('number');\nexpect(getAuthorByIdRes.body.firstName).to.equal('First Name 70');\nexpect(getAuthorByIdRes.body.lastName).to.equal('Last Name 70');",
              "err": {},
              "uuid": "57a9c704-1ffa-4e9d-bcee-085781cbf185",
              "parentUUID": "340a631a-cf17-4e08-a470-343f041d470f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should update author by ID",
              "fullTitle": "Author API Tests should update author by ID",
              "timedOut": false,
              "duration": 192,
              "state": "passed",
              "speed": "slow",
              "pass": true,
              "fail": false,
              "pending": false,
              "context": null,
              "code": "const putAuthorRes = await request(baseUrl)\n    .put('/api/v1/Authors/70')\n    .send({\n        id: 700,\n        idBook: 177,\n        firstName: 'Abc',\n        lastName: 'Def'\n    })\n    .expect(200);\nassert.equal(putAuthorRes.status, 200);\nassert.equal(putAuthorRes.body.id, 700);\nassert.equal(putAuthorRes.body.idBook, 177);\nassert.equal(putAuthorRes.body.firstName, 'Abc');\nassert.equal(putAuthorRes.body.lastName, 'Def');",
              "err": {},
              "uuid": "af5833c1-7aaf-4f8d-9d68-8f23da54a6f0",
              "parentUUID": "340a631a-cf17-4e08-a470-343f041d470f",
              "isHook": false,
              "skipped": false
            },
            {
              "title": "should delete author by ID",
              "fullTitle": "Author API Tests should delete author by ID",
              "timedOut": false,
              "duration": 182,
              "state": "failed",
              "speed": null,
              "pass": false,
              "fail": true,
              "pending": false,
              "context": null,
              "code": "const deleteAuthorRes = await request(baseUrl)\n    .delete('/api/v1/Authors/70')\n    .expect(200);\nassert.equal(deleteAuthorRes.status, 500);",
              "err": {
                "message": "AssertionError: 200 == 500",
                "estack": "AssertionError [ERR_ASSERTION]: 200 == 500\n    at Context.<anonymous> (file:///C:/Ivona/FaleRestAPis/authorsAPI.js:74:16)\n    at process.processTicksAndRejections (node:internal/process/task_queues:95:5)",
                "diff": "- 200\n+ 500\n"
              },
              "uuid": "c1199aee-c3df-425b-8d80-471caf6a2012",
              "parentUUID": "340a631a-cf17-4e08-a470-343f041d470f",
              "isHook": false,
              "skipped": false
            }
          ],
          "suites": [],
          "passes": [
            "87253ec1-f18c-4c3c-a595-44e794d3e172",
            "bf8d6b1a-9595-4c5b-b994-a016022814e7",
            "57a9c704-1ffa-4e9d-bcee-085781cbf185",
            "af5833c1-7aaf-4f8d-9d68-8f23da54a6f0"
          ],
          "failures": [
            "c1199aee-c3df-425b-8d80-471caf6a2012"
          ],
          "pending": [],
          "skipped": [],
          "duration": 1146,
          "root": false,
          "rootEmpty": false,
          "_timeout": 2000
        }
      ],
      "passes": [],
      "failures": [],
      "pending": [],
      "skipped": [],
      "duration": 0,
      "root": true,
      "rootEmpty": true,
      "_timeout": 2000
    }
  ],
  "meta": {
    "mocha": {
      "version": "11.7.1"
    },
    "mochawesome": {
      "options": {
        "quiet": false,
        "reportFilename": "mochawesome",
        "saveHtml": true,
        "saveJson": true,
        "consoleReporter": "spec",
        "useInlineDiffs": false,
        "code": true
      },
      "version": "7.1.3"
    },
    "marge": {
      "options": null,
      "version": "6.2.0"
    }
  }
}